* Matplotlib: plotting

This section was adapted from the [[https://scipy-lectures.org/intro/matplotlib/index.html][Scipy lecture notes]], which was
written by Nicolas Rougier, Mike Müller, and Gaël Varoquaux. 

License: [[http://creativecommons.org/licenses/by/4.0/][Creative Commons Attribution 4.0 International License (CC-by)]]

Adapted for [[https://github.com/bendudson/py4cl][py4cl]] by B.Dudson (2019).

The following examples assume that you have already loaded =py4cl= 
#+BEGIN_SRC lisp
(ql:quickload :py4cl)
#+END_SRC

#+RESULTS:
| :PY4CL |

and then imported python modules as lisp packages using:
#+BEGIN_SRC lisp
(py4cl:import-module "numpy" :as "np")
(py4cl:import-module "matplotlib.pyplot" :as "plt")
#+END_SRC

#+RESULTS:
: T

** Simple plot

#+CAPTION: Plot of sin and cos in range -pi to pi
#+NAME:   fig:simple
[[./matplotlib_1.png]]

#+BEGIN_SRC lisp
(let* ((x (np:linspace (- pi) pi 256 :endpoint t))
       (c (np:cos x))
       (s (np:sin x)))

  (plt:plot x c)
  (plt:plot x s))

(plt:show)
#+END_SRC

#+RESULTS:
: NIL

** Instantiating defaults

#+BEGIN_SRC lisp
;; Create a figure of size 8x6 inches, 80 dots per inch
(plt:figure :figsize '(8 6) :dpi 80)

;; Create a new subplot from a grid of 1x1
(plt:subplot 1 1 1)

(let* ((x (np:linspace (- pi) pi 256 :endpoint t))
       (c (np:cos x))
       (s (np:sin x)))

  ;; Plot cosine with a blue continuous line of width 1 (pixels)
  (plt:plot x c :color "blue" :linewidth 1.0 :linestyle "-")

  ;; Plot sine with a green continuous line of width 1 (pixels)
  (plt:plot x s :color "green" :linewidth 1.0 :linestyle "-")

  ;; Set x limits
  (plt:xlim -4.0 4.0)

  ;; Set x ticks
  (plt:xticks (np:linspace -4 4 9 :endpoint t))

  ;; Set y limits
  (plt:ylim -1.0 1.0)

  ;; Set y ticks
  (plt:yticks (np:linspace -1 1 5 :endpoint t))

  ;; Save figure using 72 dots per inch
  ;; (plt:savefig "exercise_2.png" :dpi 72)

  ;; Show result on screen
  (plt:show))
#+END_SRC

#+RESULTS:
: NIL

** Moving spines

Spines are the lines connecting the axis tick marks and noting the
boundaries of the data area. They can be placed at arbitrary positions
and until now, they were on the border of the axis. We’ll change that
since we want to have them in the middle. Since there are four of them
(top/bottom/left/right), we’ll discard the top and right by setting
their color to none and we’ll move the bottom and left ones to
coordinate 0 in data space coordinates.

This illustrates the use of =py4cl:chain= to access data members and methods
of python objects.

#+CAPTION: Plot with spines moved to origin
#+NAME:   fig:moving_spines
[[./matplotlib_2.png]]

#+BEGIN_SRC lisp
(let* ((x (np:linspace (- pi) pi 256 :endpoint t))
       (c (np:cos x))
       (s (np:sin x)))

  (plt:plot x c)
  (plt:plot x s))

(let ((ax (plt:gca)))  ; gca stands for 'get current axis'
  (py4cl:chain ax spines "right" (set_color "none"))
  (py4cl:chain ax spines "top" (set_color "none"))

  (py4cl:chain ax xaxis (set_ticks_position "bottom"))
  (py4cl:chain ax spines "bottom" (set_position '("data" 0)))

  (py4cl:chain ax yaxis (set_ticks_position "left"))
  (py4cl:chain ax spines "left" (set_position '("data" 0))))

(plt:show)
#+END_SRC

#+RESULTS:
: NIL

** Annotating some points

Let’s annotate some interesting points using the annotate command. We
chose the 2π/3 value and we want to annotate both the sine and the
cosine. We’ll first draw a marker on the curve as well as a straight
dotted line. Then, we’ll use the annotate command to display some text
with an arrow.

#+CAPTION: Annotating a plot with labels and arrows
#+NAME:   fig:annotation
[[./matplotlib_3.png]]

#+BEGIN_SRC lisp
(py4cl:import-function "dict")

(let* ((x (np:linspace (- pi) pi 256 :endpoint t))
       (c (np:cos x))
       (s (np:sin x)))

  (plt:plot x c)
  (plt:plot x s))

(let ((ax (plt:gca)))  ; gca stands for 'get current axis'
  (py4cl:chain ax spines "right" (set_color "none"))
  (py4cl:chain ax spines "top" (set_color "none"))

  (py4cl:chain ax xaxis (set_ticks_position "bottom"))
  (py4cl:chain ax spines "bottom" (set_position '("data" 0)))

  (py4cl:chain ax yaxis (set_ticks_position "left"))
  (py4cl:chain ax spines "left" (set_position '("data" 0))))

;; Annotate

(let ((y (* 2 pi (/ 3))))
  (plt:plot (vector y y) (vector 0 (cos y)) :color "blue" :linewidth 2.5 :linestyle "--")
  (plt:scatter (list y) (list (cos y)) 50 :color "blue")

  (plt:annotate "$cos(\frac{2\pi}{3})=-\frac{1}{2}$" :xy (list y (cos y)) :xycoords "data"
                :xytext '(-90 -50) :textcoords "offset points" :fontsize 16
                :arrowprops (dict :arrowstyle "->" :connectionstyle "arc3,rad=.2"))
  
  (plt:plot (list y y) (list 0 (sin y)) :color "red" :linewidth 2.5 :linestyle "--")
  (plt:scatter (list y) (list (sin y)) 50 :color "red")

  (plt:annotate "$sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$" 
                :xy (list y (sin y)) :xycoords "data"
                :xytext '(10 30) :textcoords "offset points" :fontsize 16
                :arrowprops (dict :arrowstyle "->" :connectionstyle "arc3,rad=.2")))

(plt:show)
#+END_SRC

#+RESULTS:
: NIL

